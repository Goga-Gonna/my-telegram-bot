import os
import json
import time
import random
import telebot
import threading
from telebot import types
from datetime import datetime, timedelta
from datetime import datetime, timezone

USED_PROMO_FILE = 'used_promo.json'

def get_top_users_by_stars(top_n=10):
    return sorted(USERS.items(), key=lambda x: x[1].get('stars', 0), reverse=True)[:top_n]

def get_top_users_by_referrals(top_n=10):
    return sorted(USERS.items(), key=lambda x: len(x[1].get('referrals', [])), reverse=True)[:top_n]

def load_used_promo():
    try:
        with open(USED_PROMO_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_used_promo(data):
    with open(USED_PROMO_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

USED_PROMO = load_used_promo()  # ‚Üê —Ç–µ–ø–µ—Ä—å Python –∑–Ω–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
PROMO_STATE = {}

TOKEN = '7400425001:AAHOaC6IsI7KAhFCRWq1Hk48Esc1rGkN4PI'
BOT_USERNAME = 'Nowsy_bot'  # —Ç–≤–æ–π username –±–µ–∑ @
ADMIN_ID = 1443474084  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
bot = telebot.TeleBot(TOKEN)

USERS_FILE = 'users.json'
TASKS_CONFIG_FILE = 'tasks_config.json'
TASKS_STATE_FILE = 'tasks_state.json'

CHANNELS = ['SigmaStore.ua', 'FootballZoneNewsWorld', 'SigmaCommunite', 'sigmenminecraft']
CHANNEL_LINKS = {
    'SigmaStore.ua': 'https://t.me/sigmastoreua',
    'FootballZoneNewsWorld': 'https://t.me/FootballZoneNewsWorld',
    'SigmaCommunite': 'https://t.me/SigmaCommunite',
    'sigmenminecraft': 'https://t.me/sigmenminecraft',
}

USERS = {}
GAMES = {}
BROADCAST_STATE = {}
PROMO_STATE = {}
FEEDBACK_STATE = {}
REPLY_STATE = {}  # admin_id -> user_id to reply


# –ü—Ä–æ–º–æ–∫–æ–¥—ã —Å –±–æ–Ω—É—Å–∞–º–∏ –∏ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è
valid_promo_codes = {
    "FREE10": {"bonus": 10, "expires": "2025-12-31"},
    "BONUS20": {"bonus": 20, "expires": "2025-06-30"},
    "SUPER50": {"bonus": 50, "expires": "2025-07-31"},
}

# –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞ –≤—Å–µ—Ö –º–∏–Ω–∏-–∏–≥—Ä –∏ –∑–∞–¥–∞–Ω–∏–π
COOLDOWNS = {}  # user_id : timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–∏–≥—Ä/–∑–∞–¥–∞–Ω–∏–π
COOLDOWN_SECONDS = 5400  # 1.5 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ó–∞–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {user_id: {task_id: {"completed": bool, "date": "YYYY-MM-DD"}}}
TASKS_STATE = {}
TASKS_CONFIG = {}

def load_json(file_path, default):
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return default

def save_json(file_path, data):
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_users():
    global USERS
    USERS = load_json(USERS_FILE, {})

def save_users():
    save_json(USERS_FILE, USERS)

def load_tasks_config():
    global TASKS_CONFIG
    TASKS_CONFIG = load_json(TASKS_CONFIG_FILE, {"tasks": []})

def load_tasks_state():
    global TASKS_STATE
    TASKS_STATE = load_json(TASKS_STATE_FILE, {})

def save_tasks_state():
    save_json(TASKS_STATE_FILE, TASKS_STATE)

load_users()
load_tasks_config()
load_tasks_state()

def reset_daily_tasks_if_needed(user_id):
    today_str = datetime.now(timezone.utc).strftime('%Y-%m-%d')
    user_tasks = TASKS_STATE.get(str(user_id), {})
    changed = False
    for task in TASKS_CONFIG['tasks']:
        task_id = task['id']
        task_data = user_tasks.get(task_id)
        if not task_data or task_data.get('date') != today_str:
            user_tasks[task_id] = {"completed": False, "date": today_str}
            changed = True
    if changed:
        TASKS_STATE[str(user_id)] = user_tasks
        save_tasks_state()

def mark_task_completed(user_id, task_id):
    today_str = datetime.now(timezone.utc).strftime('%Y-%m-%d')
    TASKS_STATE.setdefault(str(user_id), {})
    TASKS_STATE[str(user_id)][task_id] = {"completed": True, "date": today_str}
    save_tasks_state()

def is_task_completed(user_id, task_id):
    user_tasks = TASKS_STATE.get(str(user_id), {})
    task_data = user_tasks.get(task_id)
    if task_data and task_data.get('completed'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if task_id in ['daily_stars']:
            today_str = datetime.utcnow().strftime('%Y-%m-%d')
            return task_data.get('date') == today_str
        return True
    return False

def check_subscription(user_id):
    for channel in CHANNELS:
        try:
            member = bot.get_chat_member(f'@{channel}', user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                return False
        except Exception:
            return False
    return True

def register_user(user_id: int, referrer_id: int | None):
    user_id_str = str(user_id)
    if user_id_str not in USERS:
        USERS[user_id_str] = {
            'stars': 0,
            'referrals': [],
            'last_daily_star': 0,
            'referrer': None
        }
        if referrer_id and referrer_id != user_id:
            referrer_id_str = str(referrer_id)
            USERS[user_id_str]['referrer'] = referrer_id_str
            USERS.setdefault(referrer_id_str, {}).setdefault('referrals', [])
            if user_id_str not in USERS[referrer_id_str]['referrals']:
                USERS[referrer_id_str]['referrals'].append(user_id_str)
                USERS.setdefault(referrer_id_str, {}).setdefault('stars', 0)
                USERS[referrer_id_str]['stars'] += 10
        save_users()

def check_user_subscription_or_warn(message):
    if not check_subscription(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")
        return False
    return True

def check_cooldown(user_id, game_key):
    """–ö—É–ª–¥–∞—É–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã/–∑–∞–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ"""
    now = time.time()
    if user_id not in COOLDOWNS:
        COOLDOWNS[user_id] = {}
    last_time = COOLDOWNS[user_id].get(game_key, 0)
    if now - last_time < COOLDOWN_SECONDS:
        remaining = int((COOLDOWN_SECONDS - (now - last_time)) / 60)
        return False, remaining
    COOLDOWNS[user_id][game_key] = now
    return True, 0

def main_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ó–≤–µ–∑–¥—ã', '–ú–∏–Ω–∏-–ò–≥—Ä—ã')
    markup.row('–ñ–∞–ª–æ–±–∞/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ü—Ä–æ—Ñ–∏–ª—å')
    markup.row('üõç –ú–∞–≥–∞–∑–∏–Ω', 'üèÜ –õ–∏–¥–µ—Ä—ã')  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É
    return markup

def free_stars_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–≤–µ–∑–¥—ã', '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π')
    markup.row('–ó–∞–¥–∞–Ω–∏—è', '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    return markup

def profile_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ü—Ä–æ–º–æ–∫–æ–¥')
    markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
    markup.row('–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    return markup

def games_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (1‚Äì5)', 'üé∞ –†—É–ª–µ—Ç–∫–∞')
    markup.row('–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    return markup

def purchase_confirmation_keyboard(item_key):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_purchase:{item_key}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_purchase")
    )
    return markup

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    args = message.text.split()
    referrer_id = None
    if len(args) > 1:
        try:
            referrer_id = int(args[1])
        except ValueError:
            pass
    register_user(user_id, referrer_id)
    reset_daily_tasks_if_needed(user_id)
    send_subscription_request(chat_id, user_id)

def send_subscription_request(chat_id, user_id):
    old_msg_id = USERS.get(str(user_id), {}).get('subscription_msg_id')
    old_chat_id = USERS.get(str(user_id), {}).get('subscription_chat_id')
    if old_msg_id and old_chat_id == chat_id:
        try:
            bot.delete_message(old_chat_id, old_msg_id)
        except Exception:
            pass

    markup = types.InlineKeyboardMarkup()
    for channel in CHANNELS:
        url = CHANNEL_LINKS.get(channel, f"https://t.me/{channel}")
        markup.add(types.InlineKeyboardButton(text=f"–ö–∞–Ω–∞–ª @{channel}", url=url))
    markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))

    try:
        with open('subscribe.jpg', 'rb') as photo:
            msg = bot.send_photo(
                chat_id,
                photo,
                caption="üì¢ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
                reply_markup=markup
            )
    except:
        msg = bot.send_message(
            chat_id,
            "üì¢ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=markup
        )

    USERS[str(user_id)] = USERS.get(str(user_id), {})
    USERS[str(user_id)]['subscription_msg_id'] = msg.message_id
    USERS[str(user_id)]['subscription_chat_id'] = chat_id
    save_users()

def get_user_level(stars: int) -> str:
    if stars < 50:
        return "–ù–æ–≤–∏—á–æ–∫"
    elif stars < 200:
        return "–û–ø—ã—Ç–Ω—ã–π"
    else:
        return "–≠–∫—Å–ø–µ—Ä—Ç"

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def profile_stats_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    user_id = str(message.from_user.id)
    user_data = USERS.get(user_id, {})

    stars = user_data.get('stars', 0)
    referrals_count = len(user_data.get('referrals', []))
    status = user_data.get('status', '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    level = get_user_level(stars)

    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    profile_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è {user_name}:\n"
        f"‚≠ê –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: {stars}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}\n"
        f"üö© –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {level}"
    )
    bot.send_message(message.chat.id, profile_text)

@bot.message_handler(func=lambda message: message.text == 'üèÜ –õ–∏–¥–µ—Ä—ã')
def leaderboard_handler(message):
    top = get_top_users_by_stars()
    lines = ["‚≠ê –¢–æ–ø –ø–æ –∑–≤—ë–∑–¥–∞–º:"]
    for i, (user_id, data) in enumerate(top, 1):
        name = data.get('name', f"User {user_id}")
        stars = data.get('stars', 0)
        lines.append(f"{i}. {name} ‚Äî {stars} ‚≠ê")

    top_refs = get_top_users_by_referrals()
    lines.append("\nüë• –¢–æ–ø –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:")
    for i, (user_id, data) in enumerate(top_refs, 1):
        name = data.get('name', f"User {user_id}")
        count = len(data.get('referrals', []))
        lines.append(f"{i}. {name} ‚Äî {count} –¥—Ä—É–∑–µ–π")

    bot.send_message(message.chat.id, "\n".join(lines))

@bot.message_handler(func=lambda m: m.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
def edit_profile_handler(message):
    bot.send_message(message.chat.id, "üñã –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –±–∏–æ-–ø—Ä–æ—Ñ–∏–ª—è:")
    PROMO_STATE[message.from_user.id] = 'awaiting_bio'

@bot.message_handler(func=lambda m: PROMO_STATE.get(m.from_user.id) == 'awaiting_bio')
def receive_bio(message):
    USERS[str(message.from_user.id)]['bio'] = message.text
    save_users()
    PROMO_STATE.pop(message.from_user.id, None)
    bot.send_message(message.chat.id, "‚úÖ –ë–∏–æ-–ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.message_handler(content_types=['photo'])
def set_profile_avatar(message):
    if PROMO_STATE.get(message.from_user.id) == 'awaiting_avatar':
        USERS[str(message.from_user.id)]['avatar'] = message.photo[-1].file_id
        save_users()
        PROMO_STATE.pop(message.from_user.id, None)
        bot.send_message(message.chat.id, "üì∑ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.message_handler(func=lambda m: m.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä')
def ask_avatar(message):
    bot.send_message(message.chat.id, "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:")
    PROMO_STATE[message.from_user.id] = 'awaiting_avatar'

@bot.message_handler(func=lambda m: m.text == 'üõç –ú–∞–≥–∞–∑–∏–Ω')
def shop_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    try:
        with open('shop.json', 'r', encoding='utf-8') as f:
            items = json.load(f)

        for item in items:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –∑–∞ {item['price']} ‚≠ê", callback_data=f"buy_{item['id']}"))
            bot.send_message(message.chat.id, f"üéÅ {item['name']}\n{item['description']}", reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")

@bot.message_handler(func=lambda message: message.text == '–ñ–∞–ª–æ–±–∞/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
def feedback_request_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    user_id = message.from_user.id
    FEEDBACK_STATE[user_id] = True
    bot.send_message(message.chat.id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.message_handler(func=lambda message: FEEDBACK_STATE.get(message.from_user.id))
def handle_feedback_message(message):
    user_id = message.from_user.id
    FEEDBACK_STATE.pop(user_id, None)

    text = message.text
    user_tag = f"@{message.from_user.username}" if message.from_user.username else "–±–µ–∑ username"
    feedback_msg = (
        f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_tag}):\n\n{text}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"),
        types.InlineKeyboardButton("‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ignore_feedback")
    )
    bot.send_message(ADMIN_ID, feedback_msg, reply_markup=markup)
    bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–º–æ–∫–æ–¥')
def promo_code_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    PROMO_STATE[message.from_user.id] = 'awaiting_promo_code'
    bot.send_message(message.chat.id, "üéü –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")


@bot.message_handler(func=lambda message: PROMO_STATE.get(message.from_user.id) == 'awaiting_promo_code')
def receive_promo_code(message):
    promo = message.text.strip().upper()
    user_id = str(message.from_user.id)

    if promo not in valid_promo_codes:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        PROMO_STATE.pop(message.from_user.id, None)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    expire_date = datetime.strptime(valid_promo_codes[promo]["expires"], "%Y-%m-%d").date()
    today = datetime.utcnow().date()
    if today > expire_date:
        bot.send_message(message.chat.id, "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.")
        PROMO_STATE.pop(message.from_user.id, None)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥
    if user_id in USED_PROMO and promo in USED_PROMO[user_id]:
        bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        PROMO_STATE.pop(message.from_user.id, None)
        return

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
    bonus = valid_promo_codes[promo]["bonus"]
    USERS.setdefault(user_id, {})
    USERS[user_id]['stars'] = USERS[user_id].get('stars', 0) + bonus
    check_star_milestones(user_id)  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å
    save_users()

    # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    USED_PROMO.setdefault(user_id, [])
    USED_PROMO[user_id].append(promo)
    save_used_promo(USED_PROMO)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è
    image_path = f"promo_{bonus}.jpg"
    try:
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus} –∑–≤—ë–∑–¥.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus} –∑–≤—ë–∑–¥.")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è {bonus} –∑–≤—ë–∑–¥: {e}")

    PROMO_STATE.pop(message.from_user.id, None)

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç—É—Å')
def status_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    user_id = str(message.from_user.id)
    user_data = USERS.get(user_id, {})
    stars = user_data.get('stars', 0)
    referrals = len(user_data.get('referrals', []))
    # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–Ω–∏, VIP –∏ —Ç.–ø.
    status_text = (
        f"üìå –í–∞—à —Å—Ç–∞—Ç—É—Å:\n"
        f"‚≠ê –ó–≤—ë–∑–¥: {stars}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals}\n"
        f"üéñ –£—Ä–æ–≤–µ–Ω—å: {'–ù–æ–≤–∏—á–æ–∫' if stars < 50 else '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}"
    )
    bot.send_message(message.chat.id, status_text)

@bot.message_handler(func=lambda message: PROMO_STATE.get(message.from_user.id) == 'awaiting_promo_code')
def receive_promo_code(message):
    promo = message.text.strip().upper()
    user_id = str(message.from_user.id)

    # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    valid_promo_codes = {
        "FREE10": 10,
        "BONUS20": 20
    }

    if promo in valid_promo_codes:
        bonus = valid_promo_codes[promo]
        USERS.setdefault(user_id, {})
        USERS[user_id]['stars'] = USERS[user_id].get('stars', 0) + bonus
        save_users()
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus} –∑–≤—ë–∑–¥.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")

    PROMO_STATE.pop(message.from_user.id, None)

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–º–æ–∫–æ–¥')
def promo_code_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    PROMO_STATE[message.from_user.id] = 'awaiting_promo_code'
    bot.send_message(message.chat.id, "üéü –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:") 
@bot.message_handler(func=lambda message: message.text == '–ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–∞–∫')
def buy_sticker_pack(message):
    user_id = str(message.from_user.id)
    item_key = 'sticker_pack'
    item = SHOP.get(item_key)
    if not item:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_stars = USERS.get(user_id, {}).get('stars', 0)
    if user_stars < item['price']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    bot.send_message(
        message.chat.id,
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {item['name']} –∑–∞ {item['price']} –∑–≤—ë–∑–¥.\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?",
        reply_markup=purchase_confirmation_keyboard(item_key)
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_') or call.data == 'ignore_feedback')
def handle_feedback_buttons(call):
    if call.data == 'ignore_feedback':
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        return

    # –û—Ç–≤–µ—Ç–∏—Ç—å
    user_id = int(call.data.split('_')[1])
    REPLY_STATE[call.from_user.id] = user_id
    bot.send_message(call.message.chat.id, f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_purchase:') or call.data == 'cancel_purchase')
def handle_purchase_confirmation(call):
    user_id = str(call.from_user.id)

    if call.data == 'cancel_purchase':
        bot.answer_callback_query(call.id, "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        return

    item_key = call.data.split(':')[1]
    item = SHOP.get(item_key)
    if not item:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_stars = USERS.get(user_id, {}).get('stars', 0)
    if user_stars < item['price']:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥.")
        return

    USERS[user_id]['stars'] -= item['price']
    save_users()

    if item_key == 'sticker_pack':
        sticker_set_name = item['value']
        bot.send_message(call.message.chat.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫: t.me/addstickers/{sticker_set_name}")

    bot.answer_callback_query(call.id, "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
 
@bot.callback_query_handler(func=lambda call: call.data == "check_subs")
def callback_check_subs(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if check_subscription(user_id):
        bot.answer_callback_query(call.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!")

        user_data = USERS.get(str(user_id), {})
        msg_id = user_data.get('subscription_msg_id')
        if msg_id:
            try:
                bot.delete_message(chat_id, msg_id)
            except:
                pass
            USERS[str(user_id)].pop('subscription_msg_id', None)
            USERS[str(user_id)].pop('subscription_chat_id', None)
            save_users()

        user_name = call.from_user.first_name or "–¥—Ä—É–≥"
        facts = (
            " –í –Ω–∞—à–µ–º –±–æ—Ç–µ —Ç—ã –Ω–∞–π–¥–µ—à—å :\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–≤–µ–∑–¥—ã/–ø–æ–¥–∞—Ä–∫–∏.\n"
            "‚Ä¢ –û–±—â–µ–Ω–∏–µ,–°–ª–∏–≤—ã –°–æ—Ñ—Ç–æ–≤ –∏ —Ç–¥\n"
            "‚Ä¢ Vip –ß–∞—Ç—ã/–ö–∞–Ω–∞–ª—ã —Å –æ—Å–æ–±—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n"
        )
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {user_name}!\n\n{facts}"

        try:
            with open('welcome.jpg', 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=welcome_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ welcome.jpg: {e}")

        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    else:
        not_subscribed = []
        for channel in CHANNELS:
            try:
                member = bot.get_chat_member(f'@{channel}', user_id)
                if member.status not in ['member', 'administrator', 'creator']:
                    not_subscribed.append(channel)
            except Exception:
                not_subscribed.append(channel)

        text = "–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n"
        text += '\n'.join([f"@{c}" for c in not_subscribed])
        text += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑."

        bot.answer_callback_query(call.id, "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã")
        bot.send_message(chat_id, text)

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def handle_buy(call):
    user_id = str(call.from_user.id)
    item_id = int(call.data.split('_')[1])

    try:
        with open('shop.json', 'r', encoding='utf-8') as f:
            items = json.load(f)
        item = next((i for i in items if i['id'] == item_id), None)
        if not item:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user = USERS.get(user_id, {})
        if user.get('stars', 0) < item['price']:
            bot.answer_callback_query(call.id, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥.")
            return

        # –í—ã—á–∏—Ç–∞–µ–º –∑–≤–µ–∑–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        USERS[user_id]['stars'] -= item['price']
        save_users()

        msg = f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {item['name']}!"
        if 'link' in item:
            msg += f"\nüß∑ –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {item['link']}"
        else:
            msg += "\nüì¶ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
        bot.send_message(call.message.chat.id, msg)
        bot.answer_callback_query(call.id)

    except Exception as e:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")

@bot.message_handler(commands=['broadcast'])
def start_broadcast(message):
    if message.from_user.id != ADMIN_ID:
        return
    bot.send_message(message.chat.id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    BROADCAST_STATE['step'] = 'awaiting_media'

@bot.message_handler(func=lambda message: message.text == '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ó–≤–µ–∑–¥—ã')
def free_stars_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    reset_daily_tasks_if_needed(message.from_user.id)
    bot.send_message(message.chat.id, "–ú–µ–Ω—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–≤—ë–∑–¥:", reply_markup=free_stars_menu_keyboard())

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and REPLY_STATE.get(message.from_user.id))
def admin_reply_handler(message):
    target_user_id = REPLY_STATE.pop(message.from_user.id)
    try:
        bot.send_message(target_user_id, f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

@bot.message_handler(func=lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–≤–µ–∑–¥—ã')
def daily_stars_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    user_id = str(message.from_user.id)
    now = time.time()

    cooldown = 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    last_claim = USERS.get(user_id, {}).get('last_daily_star', 0)
    if now - last_claim < cooldown:
        remaining = int((cooldown - (now - last_claim)) / 3600)
        bot.send_message(message.chat.id, f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∑–≤—ë–∑–¥—ã —Å–µ–≥–æ–¥–Ω—è. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏—ë–º —á–µ—Ä–µ–∑ {remaining} —á–∞—Å–æ–≤.")
        return

    USERS.setdefault(user_id, {})
    USERS[user_id]['last_daily_star'] = now
    USERS[user_id]['stars'] = USERS[user_id].get('stars', 0) + 10
    save_users()
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
    mark_task_completed(user_id, "daily_stars")
    bot.send_message(message.chat.id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–≤—ë–∑–¥ —Å–µ–≥–æ–¥–Ω—è!")

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π')
def invite_friends_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    user_id = message.from_user.id
    invite_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
    bot.send_message(message.chat.id, f"üîó –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\n{invite_link}\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –∑–≤—ë–∑–¥!")

@bot.message_handler(func=lambda message: message.text == '–ó–∞–¥–∞–Ω–∏—è')
def tasks_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    user_id = message.from_user.id
    reset_daily_tasks_if_needed(user_id)

    user_tasks = TASKS_STATE.get(str(user_id), {})
    text_lines = ["üìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"]
    for task in TASKS_CONFIG['tasks']:
        task_id = task['id']
        completed = user_tasks.get(task_id, {}).get('completed', False)
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        text_lines.append(f"{task['title']}: {status}\n{task['description']}\n")
    bot.send_message(message.chat.id, '\n'.join(text_lines))

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def back_to_main_menu_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
def profile_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    bot.send_message(message.chat.id, "–í—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=profile_menu_keyboard())

@bot.message_handler(func=lambda message: message.text in ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
def profile_submenu_handler(message):
    if not check_user_subscription_or_warn(message):
        return

    if message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        user_id = str(message.from_user.id)
        user_data = USERS.get(user_id, {})
        stars = user_data.get('stars', 0)
        referrals_count = len(user_data.get('referrals', []))
        user_name = message.from_user.first_name or "–¥—Ä—É–≥"
        bio = user_data.get('bio', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        status = user_data.get('status', '–æ–±—ã—á–Ω—ã–π')
        level = user_data.get('level', 1)

        profile_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è {user_name}:\n"
            f"‚≠ê –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: {stars}\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}\n"
            f"üíº –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìà –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"üìù –ë–∏–æ: {bio}"
        )

        avatar = user_data.get('avatar')
        if avatar:
            bot.send_photo(message.chat.id, avatar, caption=profile_text)
        else:
            bot.send_message(message.chat.id, profile_text)

        bot.send_message(message.chat.id, profile_text)
    else:
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda message: message.text == '–ú–∏–Ω–∏-–ò–≥—Ä—ã')
def games_menu_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É:", reply_markup=games_menu_keyboard())

# --- –ú–∏–Ω–∏-–∏–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ" ---
@bot.message_handler(func=lambda message: message.text == 'üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (1‚Äì5)')
def start_guess_game(message):
    if not check_user_subscription_or_warn(message):
        return
    user_id = message.from_user.id
    ok, remain = check_cooldown(user_id, 'guess_number')
    if not ok:
        bot.send_message(message.chat.id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remain} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π.")
        return
    GAMES[user_id] = random.randint(1, 5)
    bot.send_message(message.chat.id, "üî¢ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")

@bot.message_handler(func=lambda message: message.from_user.id in GAMES)
def guess_game_handler(message):
    user_id = message.from_user.id
    try:
        guess = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    number = GAMES.get(user_id)
    if guess == number:
        USERS.setdefault(str(user_id), {})
        USERS[str(user_id)]['stars'] = USERS[str(user_id)].get('stars', 0) + 10
        save_users()
        bot.send_message(message.chat.id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ 10 –∑–≤—ë–∑–¥!")
        mark_task_completed(user_id, 'guess_number')
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ {number}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 1,5 —á–∞—Å–∞.")
    GAMES.pop(user_id, None)

# --- –ú–∏–Ω–∏-–∏–≥—Ä–∞ "–†—É–ª–µ—Ç–∫–∞" ---
@bot.message_handler(func=lambda message: message.text == 'üé∞ –†—É–ª–µ—Ç–∫–∞')
def start_roulette_game(message):
    if not check_user_subscription_or_warn(message):
        return
    user_id = message.from_user.id
    ok, remain = check_cooldown(user_id, 'roulette_play')
    if not ok:
        bot.send_message(message.chat.id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remain} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π.")
        return

    prize = random.choices([0, 10, 20], weights=[50, 40, 10], k=1)[0]

    def send_result():
        if prize == 0:
            bot.send_message(message.chat.id, "üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 1,5 —á–∞—Å–∞.")
        else:
            USERS.setdefault(str(user_id), {})
            USERS[str(user_id)]['stars'] = USERS[str(user_id)].get('stars', 0) + prize
            save_users()
            bot.send_message(message.chat.id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize} –∑–≤—ë–∑–¥!")
        mark_task_completed(user_id, 'roulette_play')

    video_path = 'win.mp4' if prize > 0 else 'lose.mp4'
    try:
        with open(video_path, 'rb') as video:
            bot.send_video(message.chat.id, video)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.")

    # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    threading.Timer(4.0, send_result).start()

@bot.message_handler(func=lambda message: True)
def fallback_handler(message):
    if not check_user_subscription_or_warn(message):
        return
    bot.send_message(message.chat.id, "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())

# --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@bot.message_handler(func=lambda message: BROADCAST_STATE.get('step') == 'awaiting_media' and message.from_user.id == ADMIN_ID)
def handle_broadcast_media(message):
    if message.content_type in ['text', 'photo', 'video']:
        BROADCAST_STATE['step'] = 'awaiting_confirm'
        BROADCAST_STATE['media'] = message
        bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É? (–î–∞/–ù–µ—Ç)")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")

@bot.message_handler(func=lambda message: BROADCAST_STATE.get('step') == 'awaiting_confirm' and message.from_user.id == ADMIN_ID)
def handle_broadcast_confirm(message):
    if message.text.lower() == '–¥–∞':
        BROADCAST_STATE['step'] = None
        media = BROADCAST_STATE.get('media')
        if media:
            count = 0
            for user_id_str in USERS.keys():
                try:
                    uid = int(user_id_str)
                    if media.content_type == 'text':
                        bot.send_message(uid, media.text)
                    elif media.content_type == 'photo':
                        bot.send_photo(uid, media.photo[-1].file_id, caption=media.caption)
                    elif media.content_type == 'video':
                        bot.send_video(uid, media.video.file_id, caption=media.caption)
                    count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
            bot.send_message(ADMIN_ID, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}")
        else:
            bot.send_message(ADMIN_ID, "–û—à–∏–±–∫–∞: –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    elif message.text.lower() == '–Ω–µ—Ç':
        BROADCAST_STATE['step'] = None
        bot.send_message(ADMIN_ID, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        bot.send_message(ADMIN_ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (—Ä–µ—Ñ–µ—Ä–∞–ª—ã) –¥–ª—è –∑–∞–¥–∞–Ω–∏—è "invite_friend" ---
# –í —Ñ—É–Ω–∫—Ü–∏–∏ register_user —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
# –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ä–µ—Ñ–µ—Ä–∞–ª.

def check_invite_task_completion(user_id):
    user_data = USERS.get(str(user_id), {})
    referrals = user_data.get('referrals', [])
    if referrals:
        mark_task_completed(user_id, 'invite_friend')

# –í—ã–∑–æ–≤–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: True)
def catch_all_handler(message):
    user_id = message.from_user.id
    if not check_user_subscription_or_warn(message):
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è "invite_friend"
    check_invite_task_completion(user_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏,
    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤—ã—à–µ.
    known_cmds = ['–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ó–≤–µ–∑–¥—ã', '–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–≤–µ–∑–¥—ã', '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
                  '–ó–∞–¥–∞–Ω–∏—è', '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ü—Ä–æ—Ñ–∏–ª—å', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                  '–ú–∏–Ω–∏-–ò–≥—Ä—ã', 'üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (1‚Äì5)', 'üé∞ –†—É–ª–µ—Ç–∫–∞']
    if message.text not in known_cmds:
        bot.send_message(message.chat.id, "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
